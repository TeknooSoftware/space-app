paas: #Dedicated to compiler
    version: v1

#Config
maps:
    map1:
        key1: value1
        key2: ${FOO}
    map2:
        foo: bar
        bar: R{foo}

#Secrets provider
secrets:
    map-vault:
        provider: map #Internal secrets, must be passed in this file
        options:
            key1: value1
            key2: ${FOO}
    map-vault2:
        provider: map #Internal secrets, must be passed in this file
        options:
            hello: R{world}
    volume-vault:
        provider: map
        type: foo
        options:
            foo: bar
            bar: foo

#Custom image, not available in the library
images:
    foo:
        build-name: foo
        tag: latest
        path: '/images/${FOO}'

#Hook to build the project before container, Called in this order
builds:
    composer-build: #Name of the step
        composer:
            action: install #Hook to call
            arguments:
                - 'no-dev'
                - 'optimize-autoloader'
                - 'classmap-authoritative'
    custom-hook:
        hook-id: foo bar

#Volume to build to use with container
volumes:
    extra: #Name of the volume
        local-path: "/foo/bar" #optional local path where store data in the volume
        add: #folder or file, from .paas.yaml where is located to add to the volume
            - 'extra'
    other-name: #Name of the volume
        add: #folder or file, from .paas.yaml where is located to add to the volume
            - 'vendor'

#Pods (set of container)
pods:
    php-pods: #podset name
        extends: 'php-pods-extends'
        containers:
            php-run: #Container name
                volumes: #Volumes to link
                    app:
                        mount-path: '/opt/app' #Path where data will be stored
                        add: #folder or file, from .paas.yaml where is located to add to the volume
                            - 'src'
                            - 'var'
                            - 'vendor'
                            - 'composer.json'
                            - 'composer.lock'
                            - 'composer.phar'
                        writables:
                            - 'var/*'
                    vault:
                        mount-path: '/vault'
                        from-secret: 'volume-vault'
                variables: #To define some environment variables
                    from-maps:
                        KEY0: 'map1.key0'
                    import-maps:
                        - 'map2'
                    from-secrets: #To fetch some value from secret/vault
                        KEY1: 'map-vault.key1'
                        KEY2: 'map-vault.key2'
                    import-secrets:
                        - 'map-vault2'
    shell:
        replicas: 1
        containers:
            sleep:
                extends: 'bash-extends'
    demo:
        replicas: 1
        upgrade:
            strategy: recreate
        security:
            fs-group: 1000
        containers:
            nginx:
                image: registry.hub.docker.com/library/nginx
                version: alpine
                listen: #Port listen by the container
                    - 8080
                    - 8181
                volumes:
                    www:
                        mount-path: '/var'
                        add:
                            - 'nginx/www'
                    config:
                        mount-path: '/etc/nginx/conf.d/'
                        add:
                            - 'nginx/conf.d/default.conf'
                healthcheck:
                    initial-delay-seconds: 10
                    period-seconds: 30
                    probe:
                        http:
                            port: 8080
                            path: '/status'
                            is-secure: true
                    threshold:
                        success: 3
                        failure: 2
            waf:
                image: registry.hub.docker.com/library/waf
                version: alpine
                listen: #Port listen by the container
                    - 8181
                healthcheck:
                    initial-delay-seconds: 10
                    period-seconds: 30
                    probe:
                        tcp:
                            port: 8181
            blackfire:
                image: 'blackfire/blackfire'
                version: '2'
                listen:
                    - 8307
                variables:
                    BLACKFIRE_SERVER_ID: 'foo'
                    BLACKFIRE_SERVER_TOKEN: 'bar'

#Pods expositions
services:
    php-service: #Service name
        extends: 'php-pods-extends'
    demo: #Service name
        ports:
            - listen: 8080 #Port listened
              target: 8080 #Pod's port targeted
            - listen: 8181 #Port listened
              target: 8181 #Pod's port targeted

#Ingresses configuration
ingresses:
    demo: #rule name
        extends: 'demo-extends'
        host: demo-paas.teknoo.software
        tls:
            secret: "demo-vault" #Configure the orchestrator to fetch value from vault
        meta:
            letsencrypt: true
            annotations:
                foo2: bar
        paths:
            - path: /php
              service:
                  name: php-service
                  port: 9876
    demo-secure: #rule name
        host: demo-secure.teknoo.software
        https-backend: true
        tls:
            secret: "demo-vault" #Configure the orchestrator to fetch value from vault
        service: #default service
            name: demo
            port: 8181